version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://eikaiwa_user:eikaiwa_password@postgres:5432/eikaiwa_grow
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secure-jwt-secret-key-here
      - NEXTAUTH_SECRET=your-nextauth-secret-key-here
      - NEXTAUTH_URL=http://localhost:3000
      - INTERNAL_API_TOKEN=your-internal-api-token-here
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - eikaiwa-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: eikaiwa_grow
      POSTGRES_USER: eikaiwa_user
      POSTGRES_PASSWORD: eikaiwa_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - eikaiwa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eikaiwa_user -d eikaiwa_grow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - eikaiwa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - eikaiwa-network
    restart: unless-stopped

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    networks:
      - eikaiwa-network
    restart: unless-stopped

  # Event Processor (Scheduled job runner)
  event-processor:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://eikaiwa_user:eikaiwa_password@postgres:5432/eikaiwa_grow
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eikaiwa-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Production setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - eikaiwa-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  eikaiwa-network:
    driver: bridge