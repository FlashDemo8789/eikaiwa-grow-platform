// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Multi-tenant Organization model
model Organization {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  domain        String?  @unique
  plan          Plan     @default(BASIC)
  status        OrgStatus @default(ACTIVE)
  settings      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  users         User[]
  schools       School[]
  students      Student[]
  subscriptions Subscription[]
  events        Event[]
  customers     Customer[]
  paymentAuditLogs PaymentAuditLog[]
  
  @@map("organizations")
}

// User management with role-based access
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?
  role          Role     @default(TEACHER)
  status        UserStatus @default(ACTIVE)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Multi-tenant relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relationships
  schools       SchoolUser[]
  students      Student[]
  lessons       Lesson[]
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  
  @@map("users")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// School management
model School {
  id            String   @id @default(cuid())
  name          String
  description   String?
  address       String?
  phone         String?
  email         String?
  website       String?
  settings      Json?
  status        SchoolStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Multi-tenant relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relationships
  users         SchoolUser[]
  students      Student[]
  courses       Course[]
  lessons       Lesson[]
  analytics     SchoolAnalytics[]
  
  @@map("schools")
}

// Many-to-many relationship between schools and users
model SchoolUser {
  id       String @id @default(cuid())
  role     SchoolRole @default(TEACHER)
  joinedAt DateTime @default(now())

  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([schoolId, userId])
  @@map("school_users")
}

// Student management
model Student {
  id           String   @id @default(cuid())
  studentId    String   // Custom student ID
  firstName    String
  lastName     String
  email        String?
  phone        String?
  birthDate    DateTime?
  level        EnglishLevel?
  notes        String?
  status       StudentStatus @default(ACTIVE)
  joinedAt     DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Multi-tenant relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  schoolId     String
  school       School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  teacherId    String?
  teacher      User?  @relation(fields: [teacherId], references: [id])

  // Relationships
  enrollments  CourseEnrollment[]
  lessons      LessonAttendance[]
  progress     StudentProgress[]
  customer     Customer?
  
  @@unique([organizationId, studentId])
  @@map("students")
}

// Course management
model Course {
  id          String   @id @default(cuid())
  name        String
  description String?
  level       EnglishLevel
  duration    Int      // Duration in weeks
  maxStudents Int      @default(10)
  price       Float?
  status      CourseStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  schoolId    String
  school      School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  enrollments CourseEnrollment[]
  lessons     Lesson[]
  
  @@map("courses")
}

// Course enrollments
model CourseEnrollment {
  id         String   @id @default(cuid())
  enrolledAt DateTime @default(now())
  status     EnrollmentStatus @default(ACTIVE)
  
  studentId  String
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  courseId   String
  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("course_enrollments")
}

// Lesson management
model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  duration    Int      @default(60) // Duration in minutes
  status      LessonStatus @default(SCHEDULED)
  notes       String?
  materials   Json?    // Lesson materials and resources
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  schoolId    String
  school      School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  teacherId   String
  teacher     User   @relation(fields: [teacherId], references: [id])
  
  courseId    String?
  course      Course? @relation(fields: [courseId], references: [id])

  attendance  LessonAttendance[]
  
  @@map("lessons")
}

// Lesson attendance tracking
model LessonAttendance {
  id        String   @id @default(cuid())
  status    AttendanceStatus @default(PRESENT)
  notes     String?
  createdAt DateTime @default(now())
  
  lessonId  String
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
  @@map("lesson_attendance")
}

// Student progress tracking
model StudentProgress {
  id           String   @id @default(cuid())
  skill        Skill
  level        Int      @default(1) // 1-10 scale
  assessment   String?
  assessedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  
  studentId    String
  student      Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_progress")
}

// School analytics and metrics
model SchoolAnalytics {
  id              String   @id @default(cuid())
  date            DateTime
  totalStudents   Int      @default(0)
  activeStudents  Int      @default(0)
  totalLessons    Int      @default(0)
  attendanceRate  Float? // Percentage
  revenue         Float?
  expenses        Float?
  createdAt       DateTime @default(now())

  schoolId        String
  school          School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, date])
  @@map("school_analytics")
}

// Subscription management
model Subscription {
  id              String   @id @default(cuid())
  status          SubscriptionStatus
  plan            Plan
  priceId         String?  // Stripe price ID
  customerId      String?  // Stripe customer ID
  subscriptionId  String?  // Stripe subscription ID
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Event-driven architecture for async processing
model Event {
  id          String   @id @default(cuid())
  type        String   // Event type (user.created, lesson.completed, etc.)
  payload     Json     // Event data
  status      EventStatus @default(PENDING)
  retryCount  Int      @default(0)
  maxRetries  Int      @default(3)
  processedAt DateTime?
  createdAt   DateTime @default(now())

  // Optional relationships for context
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  userId      String?
  user        User? @relation(fields: [userId], references: [id])

  @@map("events")
}

// Enums
enum Plan {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum OrgStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum Role {
  SUPER_ADMIN
  ORG_ADMIN
  SCHOOL_ADMIN
  TEACHER
  ASSISTANT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SchoolRole {
  ADMIN
  TEACHER
  ASSISTANT
}

enum SchoolStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  DROPPED_OUT
}

enum EnglishLevel {
  BEGINNER
  ELEMENTARY
  PRE_INTERMEDIATE
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
  PROFICIENCY
}

enum CourseStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  SUSPENDED
}

enum LessonStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum Skill {
  LISTENING
  SPEAKING
  READING
  WRITING
  GRAMMAR
  VOCABULARY
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
}

enum EventStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Payment System Models

// Customer payment management
model Customer {
  id                String   @id @default(cuid())
  email             String
  name              String?
  phone             String?
  address           Json?    // Address information
  stripeCustomerId  String?  @unique
  payPayCustomerId  String?  @unique
  defaultPaymentMethod String? // Payment method ID
  billingAddress    Json?
  taxId             String?  // For business customers
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Multi-tenant relationship
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Optional student relationship
  studentId         String?  @unique
  student           Student? @relation(fields: [studentId], references: [id])

  // Relationships
  paymentMethods    PaymentMethod[]
  payments          Payment[]
  invoices          Invoice[]
  subscriptions     BillingSubscription[]
  family            FamilyGroup?
  familyMemberships FamilyMember[]
  paymentReminders  PaymentReminder[]

  @@unique([organizationId, email])
  @@map("customers")
}

// Family grouping for discounts
model FamilyGroup {
  id               String   @id @default(cuid())
  name             String
  primaryCustomerId String  @unique
  primaryCustomer  Customer @relation(fields: [primaryCustomerId], references: [id])
  discountRate     Float  @default(0) // Percentage discount
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  members          FamilyMember[]

  @@map("family_groups")
}

model FamilyMember {
  id          String @id @default(cuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  familyGroupId String
  familyGroup FamilyGroup @relation(fields: [familyGroupId], references: [id], onDelete: Cascade)
  relationship String // "parent", "child", "sibling"
  joinedAt    DateTime @default(now())

  @@unique([customerId, familyGroupId])
  @@map("family_members")
}

// Payment methods (cards, bank accounts, etc.)
model PaymentMethod {
  id               String   @id @default(cuid())
  type             PaymentMethodType
  provider         PaymentProvider
  externalId       String   // Stripe PM ID, PayPay ID, etc.
  last4            String?
  brand            String?  // Card brand
  expiryMonth      Int?
  expiryYear       Int?
  isDefault        Boolean  @default(false)
  isActive         Boolean  @default(true)
  bankName         String?  // For bank transfers
  bankAccount      String?  // Masked account number
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  customerId       String
  customer         Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Relationships
  payments         Payment[]

  @@map("payment_methods")
}

// Core payment transactions
model Payment {
  id               String   @id @default(cuid())
  amount           Float
  currency         String   @default("JPY")
  status           PaymentStatus
  type             PaymentType
  provider         PaymentProvider
  externalId       String?  // Stripe payment intent ID, PayPay order ID, etc.
  description      String?
  metadata         Json?
  
  // Fee breakdown
  applicationFee   Float?
  stripeFee        Float?
  platformFee      Float?
  netAmount        Float?
  
  // Tax handling
  taxAmount        Float?
  taxRate          Float? // Japanese consumption tax 10%
  
  // Timing
  processedAt      DateTime?
  settledAt        DateTime?
  refundedAt       DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  customerId       String
  customer         Customer @relation(fields: [customerId], references: [id])
  
  paymentMethodId  String?
  paymentMethod    PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  
  invoiceId        String?
  invoice          Invoice? @relation(fields: [invoiceId], references: [id])
  
  subscriptionId   String?
  subscription     BillingSubscription? @relation(fields: [subscriptionId], references: [id])

  // Related records
  refunds          PaymentRefund[]
  konbiniPayment   KonbiniPayment?
  payPayPayment    PayPayPayment?

  @@map("payments")
}

// Refund management
model PaymentRefund {
  id          String   @id @default(cuid())
  amount      Float
  reason      String?
  status      RefundStatus
  externalId  String?  // Stripe refund ID
  processedAt DateTime?
  createdAt   DateTime @default(now())

  paymentId   String
  payment     Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("payment_refunds")
}

// Invoice management
model Invoice {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique
  status          InvoiceStatus
  subtotal        Float
  taxAmount       Float
  totalAmount     Float
  dueDate         DateTime
  issueDate       DateTime @default(now())
  paidAt          DateTime?
  currency        String   @default("JPY")
  notes           String?
  metadata        Json?

  // PDF generation
  pdfUrl          String?
  pdfGeneratedAt  DateTime?

  customerId      String
  customer        Customer @relation(fields: [customerId], references: [id])

  // Relationships
  lineItems       InvoiceLineItem[]
  payments        Payment[]
  reminders       PaymentReminder[]

  @@map("invoices")
}

// Invoice line items
model InvoiceLineItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int     @default(1)
  unitPrice   Float
  amount      Float
  metadata    Json?

  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

// Subscription billing
model BillingSubscription {
  id                    String   @id @default(cuid())
  status                BillingSubscriptionStatus
  planName              String
  amount                Float
  currency              String   @default("JPY")
  billingCycle          BillingCycle
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  nextBillingDate       DateTime?
  trialEnd              DateTime?
  cancelAtPeriodEnd     Boolean  @default(false)
  canceledAt            DateTime?
  
  // Stripe specific
  stripeSubscriptionId  String?  @unique
  stripePriceId         String?
  
  // Discounts
  discountRate          Float?
  discountEndDate       DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  customerId            String
  customer              Customer @relation(fields: [customerId], references: [id])

  // Relationships
  payments              Payment[]

  @@map("billing_subscriptions")
}

// PayPay specific payment data
model PayPayPayment {
  id                String   @id @default(cuid())
  payPayOrderId     String   @unique
  merchantPaymentId String   @unique
  qrCodeUrl         String?
  deepLink          String?
  expiresAt         DateTime
  status            PayPayStatus
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  paymentId         String   @unique
  payment           Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("paypay_payments")
}

// Convenience store payment data
model KonbiniPayment {
  id                String   @id @default(cuid())
  store             KonbiniStore
  paymentCode       String   @unique
  barcode           String?
  qrCode            String?
  expiresAt         DateTime
  paidAt            DateTime?
  status            KonbiniStatus
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  paymentId         String   @unique
  payment           Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("konbini_payments")
}

// Payment audit logging
model PaymentAuditLog {
  id            String   @id @default(cuid())
  action        String   // CREATE, UPDATE, REFUND, CANCEL
  entityType    String   // PAYMENT, INVOICE, SUBSCRIPTION
  entityId      String
  oldData       Json?
  newData       Json?
  userId        String?
  userEmail     String?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("payment_audit_logs")
}

// Payment reminders and notifications
model PaymentReminder {
  id          String   @id @default(cuid())
  type        ReminderType
  status      ReminderStatus
  scheduledAt DateTime
  sentAt      DateTime?
  method      NotificationMethod
  recipient   String   // email, phone, LINE ID
  subject     String?
  message     String
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relationships
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  
  invoiceId   String?
  invoice     Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("payment_reminders")
}

// Payment Enums

enum PaymentMethodType {
  CARD
  BANK_TRANSFER
  PAYPAY
  KONBINI
  LINE_PAY
  RAKUTEN_PAY
}

enum PaymentProvider {
  STRIPE
  PAYPAY
  KONBINI
  BANK_TRANSFER
  LINE_PAY
  RAKUTEN_PAY
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentType {
  ONE_TIME
  SUBSCRIPTION
  INSTALLMENT
  REFUND
}

enum RefundStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  OVERDUE
  PARTIAL
}

enum BillingSubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum BillingCycle {
  MONTHLY
  YEARLY
  WEEKLY
}

enum PayPayStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  CANCELED
  EXPIRED
}

enum KonbiniStore {
  SEVEN_ELEVEN
  FAMILY_MART
  LAWSON
  MINISTOP
  DAILY_YAMAZAKI
  SEICOMART
}

enum KonbiniStatus {
  PENDING
  PAID
  EXPIRED
  CANCELED
}

enum ReminderType {
  PAYMENT_DUE
  PAYMENT_OVERDUE
  PAYMENT_FAILED
  SUBSCRIPTION_RENEWAL
  TRIAL_ENDING
}

enum ReminderStatus {
  PENDING
  SENT
  FAILED
  CANCELED
}

enum NotificationMethod {
  EMAIL
  SMS
  LINE
  PUSH
}