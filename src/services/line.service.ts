import { Client, middleware, MiddlewareConfig, WebhookEvent, MessageEvent, TextMessage, FlexMessage, ImageMessage, RichMenu, RichMenuArea, RichMenuSize, RichMenuBounds } from '@line/bot-sdk';
import { logger } from '@/lib/logger';

// LINE Bot configuration
const config: MiddlewareConfig = {
  channelSecret: process.env.LINE_CHANNEL_SECRET || '',
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN || ''
};

const client = new Client(config);

// Japanese cultural colors
export const JAPANESE_COLORS = {
  SAKURA: '#F8BBD0',      // Ê°úËâ≤ (Cherry blossom)
  MOMIJI: '#FF6B35',      // Á¥ÖËëâ (Autumn maple)
  SORA: '#87CEEB',        // Á©∫Ëâ≤ (Sky blue)
  YAMABUKI: '#F4C430',    // Â±±ÂêπËâ≤ (Yamabuki yellow)
  MURASAKI: '#9A4C95',    // Á¥´ (Purple)
  MIDORI: '#4F7942'       // Á∑ë (Green)
};

// Seasonal themes
export type Season = 'spring' | 'summer' | 'autumn' | 'winter';

export const SEASONAL_THEMES = {
  spring: {
    color: JAPANESE_COLORS.SAKURA,
    emoji: 'üå∏',
    greeting: 'Êò•„ÅÆÊ∏©„Åã„ÅÑÈôΩÊ∞ó„Åß„Åô„Å≠',
    background: 'linear-gradient(135deg, #F8BBD0 0%, #FFB6C1 100%)'
  },
  summer: {
    color: JAPANESE_COLORS.SORA,
    emoji: 'üåª',
    greeting: 'Êöë„ÅÑÊó•„ÅåÁ∂ö„Åç„Åæ„Åô„Åå„ÄÅ„ÅäÂÖÉÊ∞ó„Åß„Åô„Åã',
    background: 'linear-gradient(135deg, #87CEEB 0%, #00BFFF 100%)'
  },
  autumn: {
    color: JAPANESE_COLORS.MOMIJI,
    emoji: 'üçÅ',
    greeting: 'Áßã„ÅÆÊ∑±„Åæ„Çä„ÇíÊÑü„Åò„ÇãÂ≠£ÁØÄ„Å®„Å™„Çä„Åæ„Åó„Åü',
    background: 'linear-gradient(135deg, #FF6B35 0%, #FF8C00 100%)'
  },
  winter: {
    color: JAPANESE_COLORS.MURASAKI,
    emoji: '‚ùÑÔ∏è',
    greeting: 'ÂØí„ÅÑÊó•„ÅåÁ∂ö„Åç„Åæ„Åô„Åå„ÄÅ„Åä‰Ωì„Å´„ÅäÊ∞ó„Çí„Å§„Åë„Åè„Å†„Åï„ÅÑ',
    background: 'linear-gradient(135deg, #9A4C95 0%, #8A2BE2 100%)'
  }
};

export class LineService {
  private client: Client;

  constructor() {
    this.client = client;
  }

  // Get current season based on Japanese calendar
  getCurrentSeason(): Season {
    const month = new Date().getMonth() + 1;
    if (month >= 3 && month <= 5) return 'spring';
    if (month >= 6 && month <= 8) return 'summer';
    if (month >= 9 && month <= 11) return 'autumn';
    return 'winter';
  }

  // Send text message with Japanese formatting
  async sendTextMessage(userId: string, text: string, withSeasonal: boolean = true): Promise<void> {
    try {
      let message = text;
      
      if (withSeasonal) {
        const season = this.getCurrentSeason();
        const theme = SEASONAL_THEMES[season];
        message = `${theme.emoji} ${message}\n\n${theme.greeting}`;
      }

      await this.client.pushMessage(userId, {
        type: 'text',
        text: message
      });

      logger.info('LINE text message sent successfully', { userId, messageLength: message.length });
    } catch (error) {
      logger.error({ error, userId }, 'Failed to send LINE text message');
      throw error;
    }
  }

  // Send flex message with Japanese business card format
  async sendBusinessCard(userId: string, schoolInfo: {
    name: string;
    address: string;
    phone: string;
    email: string;
    principalName: string;
  }): Promise<void> {
    const flexMessage: FlexMessage = {
      type: 'flex',
      altText: 'Â≠¶Ê†°ÊÉÖÂ†±„ÅÆ„ÅîÊ°àÂÜÖ',
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: 'üè´ Â≠¶Ê†°ÊÉÖÂ†±',
              weight: 'bold',
              color: '#FFFFFF',
              size: 'lg'
            }
          ],
          backgroundColor: JAPANESE_COLORS.MIDORI,
          paddingAll: '12px'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: schoolInfo.name,
              weight: 'bold',
              size: 'xl',
              margin: 'none'
            },
            {
              type: 'text',
              text: `Ê†°Èï∑: ${schoolInfo.principalName}`,
              size: 'sm',
              color: '#666666',
              margin: 'sm'
            },
            {
              type: 'separator',
              margin: 'md'
            },
            {
              type: 'box',
              layout: 'vertical',
              margin: 'md',
              spacing: 'sm',
              contents: [
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    {
                      type: 'text',
                      text: '‰ΩèÊâÄ',
                      color: '#666666',
                      size: 'sm',
                      flex: 2
                    },
                    {
                      type: 'text',
                      text: schoolInfo.address,
                      wrap: true,
                      size: 'sm',
                      flex: 5
                    }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    {
                      type: 'text',
                      text: 'ÈõªË©±',
                      color: '#666666',
                      size: 'sm',
                      flex: 2
                    },
                    {
                      type: 'text',
                      text: schoolInfo.phone,
                      size: 'sm',
                      flex: 5
                    }
                  ]
                },
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    {
                      type: 'text',
                      text: 'Email',
                      color: '#666666',
                      size: 'sm',
                      flex: 2
                    },
                    {
                      type: 'text',
                      text: schoolInfo.email,
                      size: 'sm',
                      flex: 5
                    }
                  ]
                }
              ]
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              style: 'primary',
              height: 'sm',
              action: {
                type: 'uri',
                label: '„Ç¶„Çß„Éñ„Çµ„Ç§„Éà„ÇíË¶ã„Çã',
                uri: process.env.APP_URL || 'https://eikaiwa-grow.com'
              },
              color: JAPANESE_COLORS.SAKURA
            }
          ],
          flex: 0
        }
      }
    };

    try {
      await this.client.pushMessage(userId, flexMessage);
      logger.info('LINE business card sent successfully', { userId, schoolName: schoolInfo.name });
    } catch (error) {
      logger.error({ error, userId }, 'Failed to send LINE business card');
      throw error;
    }
  }

  // Send event notification with Japanese formatting
  async sendEventNotification(userId: string, event: {
    name: string;
    date: string;
    location: string;
    description: string;
  }): Promise<void> {
    const season = this.getCurrentSeason();
    const theme = SEASONAL_THEMES[season];
    
    const flexMessage: FlexMessage = {
      type: 'flex',
      altText: `„Ç§„Éô„É≥„ÉàÈÄöÁü•: ${event.name}`,
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: `${theme.emoji} „Ç§„Éô„É≥„ÉàÈÄöÁü•`,
              weight: 'bold',
              color: '#FFFFFF',
              size: 'lg'
            }
          ],
          backgroundColor: theme.color,
          paddingAll: '12px'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: event.name,
              weight: 'bold',
              size: 'xl',
              margin: 'none'
            },
            {
              type: 'text',
              text: event.date,
              size: 'sm',
              color: '#666666',
              margin: 'sm'
            },
            {
              type: 'separator',
              margin: 'md'
            },
            {
              type: 'box',
              layout: 'vertical',
              margin: 'md',
              spacing: 'sm',
              contents: [
                {
                  type: 'box',
                  layout: 'baseline',
                  contents: [
                    {
                      type: 'text',
                      text: 'Â†¥ÊâÄ',
                      color: '#666666',
                      size: 'sm',
                      flex: 2
                    },
                    {
                      type: 'text',
                      text: event.location,
                      wrap: true,
                      size: 'sm',
                      flex: 5
                    }
                  ]
                },
                {
                  type: 'text',
                  text: event.description,
                  wrap: true,
                  size: 'sm',
                  margin: 'md'
                }
              ]
            }
          ]
        },
        footer: {
          type: 'box',
          layout: 'horizontal',
          spacing: 'sm',
          contents: [
            {
              type: 'button',
              style: 'primary',
              height: 'sm',
              action: {
                type: 'postback',
                label: 'ÂèÇÂä†‰∫àÂÆö',
                data: `action=attend&eventId=${event.name}`
              },
              color: JAPANESE_COLORS.MIDORI,
              flex: 2
            },
            {
              type: 'button',
              style: 'secondary',
              height: 'sm',
              action: {
                type: 'postback',
                label: 'Ë©≥Á¥∞„ÇíË¶ã„Çã',
                data: `action=details&eventId=${event.name}`
              },
              flex: 2
            }
          ],
          flex: 0
        }
      }
    };

    try {
      await this.client.pushMessage(userId, flexMessage);
      logger.info('LINE event notification sent successfully', { userId, eventName: event.name });
    } catch (error) {
      logger.error({ error, userId }, 'Failed to send LINE event notification');
      throw error;
    }
  }

  // Create rich menu for Japanese users
  async createJapaneseRichMenu(): Promise<string> {
    const richMenuObject: RichMenu = {
      size: {
        width: 2500,
        height: 1686
      },
      selected: true,
      name: 'EikaiwaGrow „É°„Ç§„É≥„É°„Éã„É•„Éº',
      chatBarText: '„É°„Éã„É•„Éº',
      areas: [
        {
          bounds: {
            x: 0,
            y: 0,
            width: 833,
            height: 843
          },
          action: {
            type: 'postback',
            data: 'action=schedule',
            displayText: 'üìÖ „Çπ„Ç±„Ç∏„É•„Éº„É´'
          }
        },
        {
          bounds: {
            x: 833,
            y: 0,
            width: 834,
            height: 843
          },
          action: {
            type: 'postback',
            data: 'action=students',
            displayText: 'üë• ÁîüÂæíÁÆ°ÁêÜ'
          }
        },
        {
          bounds: {
            x: 1667,
            y: 0,
            width: 833,
            height: 843
          },
          action: {
            type: 'postback',
            data: 'action=reports',
            displayText: 'üìä „É¨„Éù„Éº„Éà'
          }
        },
        {
          bounds: {
            x: 0,
            y: 843,
            width: 833,
            height: 843
          },
          action: {
            type: 'postback',
            data: 'action=events',
            displayText: 'üé™ „Ç§„Éô„É≥„Éà'
          }
        },
        {
          bounds: {
            x: 833,
            y: 843,
            width: 834,
            height: 843
          },
          action: {
            type: 'postback',
            data: 'action=billing',
            displayText: 'üí∞ Ë´ãÊ±Ç„ÉªÊîØÊâï„ÅÑ'
          }
        },
        {
          bounds: {
            x: 1667,
            y: 843,
            width: 833,
            height: 843
          },
          action: {
            type: 'postback',
            data: 'action=settings',
            displayText: '‚öôÔ∏è Ë®≠ÂÆö'
          }
        }
      ]
    };

    try {
      const richMenuId = await this.client.createRichMenu(richMenuObject);
      logger.info('Rich menu created successfully', { richMenuId });
      return richMenuId;
    } catch (error) {
      logger.error({ error }, 'Failed to create rich menu');
      throw error;
    }
  }

  // Broadcast message to multiple users
  async broadcastMessage(userIds: string[], message: string, messageType: 'text' | 'flex' = 'text'): Promise<void> {
    try {
      const season = this.getCurrentSeason();
      const theme = SEASONAL_THEMES[season];
      
      if (messageType === 'text') {
        const formattedMessage = `${theme.emoji} ${message}\n\n${theme.greeting}`;
        
        await this.client.multicast(userIds, {
          type: 'text',
          text: formattedMessage
        });
      }

      logger.info('Broadcast message sent successfully', { userCount: userIds.length, messageType });
    } catch (error) {
      logger.error({ error, userCount: userIds.length }, 'Failed to send broadcast message');
      throw error;
    }
  }

  // Handle webhook events
  async handleWebhook(events: WebhookEvent[]): Promise<void> {
    const promises = events.map(async (event) => {
      try {
        switch (event.type) {
          case 'message':
            await this.handleMessageEvent(event);
            break;
          case 'postback':
            await this.handlePostbackEvent(event);
            break;
          case 'follow':
            await this.handleFollowEvent(event);
            break;
          case 'unfollow':
            await this.handleUnfollowEvent(event);
            break;
          default:
            logger.info('Unhandled event type', { eventType: event.type });
        }
      } catch (error) {
        logger.error({ error, event }, 'Error handling webhook event');
      }
    });

    await Promise.all(promises);
  }

  private async handleMessageEvent(event: MessageEvent): Promise<void> {
    const { replyToken, source, message } = event;
    const userId = source.userId;

    if (!userId) return;

    if (message.type === 'text') {
      const userMessage = message.text.toLowerCase().trim();
      
      // Japanese greetings and responses
      if (userMessage.includes('„Åä„ÅØ„Çà„ÅÜ') || userMessage.includes('„Åì„Çì„Å´„Å°„ÅØ') || userMessage.includes('„Åì„Çì„Å∞„Çì„ÅØ')) {
        const season = this.getCurrentSeason();
        const theme = SEASONAL_THEMES[season];
        
        await this.client.replyMessage(replyToken, {
          type: 'text',
          text: `${theme.emoji} „Åì„Çì„Å´„Å°„ÅØÔºÅ\n${theme.greeting}\n\n‰Ωï„Åã„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Çã„Åì„Å®„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü`
        });
      } else if (userMessage.includes('„É°„Éã„É•„Éº') || userMessage.includes('„Éò„É´„Éó')) {
        await this.sendMenuOptions(replyToken);
      } else {
        // Default response with polite Japanese
        await this.client.replyMessage(replyToken, {
          type: 'text',
          text: '„ÅäÁñ≤„ÇåÊßò„Åß„Åô„ÄÇ\n„ÅîË≥™Âïè„ÇÑ„ÅîË¶ÅÊúõ„Åå„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„Çâ„ÄÅ„ÅäÊ∞óËªΩ„Å´„ÅäÂ£∞„Åã„Åë„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n„É°„Éã„É•„Éº„Åã„Çâ„ÅäÈÅ∏„Å≥„ÅÑ„Åü„Å†„Åè„Åã„ÄÅ„Äå„Éò„É´„Éó„Äç„Å®„ÅäÈÄÅ„Çä„Åè„Å†„Åï„ÅÑ„ÄÇ'
        });
      }
    }
  }

  private async handlePostbackEvent(event: any): Promise<void> {
    const { replyToken, postback } = event;
    const data = new URLSearchParams(postback.data);
    const action = data.get('action');

    switch (action) {
      case 'schedule':
        await this.sendScheduleInfo(replyToken);
        break;
      case 'students':
        await this.sendStudentManagementMenu(replyToken);
        break;
      case 'reports':
        await this.sendReportsMenu(replyToken);
        break;
      case 'events':
        await this.sendEventsMenu(replyToken);
        break;
      case 'billing':
        await this.sendBillingMenu(replyToken);
        break;
      case 'settings':
        await this.sendSettingsMenu(replyToken);
        break;
      default:
        await this.client.replyMessage(replyToken, {
          type: 'text',
          text: 'Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇ„Åù„Å°„Çâ„ÅÆÊ©üËÉΩ„ÅØÁèæÂú®Ê∫ñÂÇô‰∏≠„Åß„Åô„ÄÇ'
        });
    }
  }

  private async handleFollowEvent(event: any): Promise<void> {
    const userId = event.source.userId;
    const season = this.getCurrentSeason();
    const theme = SEASONAL_THEMES[season];
    
    if (userId) {
      await this.client.pushMessage(userId, {
        type: 'text',
        text: `${theme.emoji} EikaiwaGrow„Å´„ÅäÂèãÈÅîÁôªÈå≤„ÅÑ„Åü„Å†„Åç„ÄÅ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ\n\n${theme.greeting}\n\n„Åì„Å°„Çâ„ÅÆ„Ç¢„Éó„É™„Åß„ÅØ‰ª•‰∏ã„ÅÆ„Åì„Å®„Åå„Åß„Åç„Åæ„ÅôÔºö\n‚Ä¢ üìÖ ÊéàÊ•≠„Çπ„Ç±„Ç∏„É•„Éº„É´„ÅÆÁ¢∫Ë™ç\n‚Ä¢ üë• ÁîüÂæí„ÅÆÁÆ°ÁêÜ\n‚Ä¢ üìä ÊàêÁ∏æ„É¨„Éù„Éº„Éà„ÅÆÁ¢∫Ë™ç\n‚Ä¢ üé™ „Ç§„Éô„É≥„ÉàÊÉÖÂ†±\n‚Ä¢ üí∞ Ë´ãÊ±Ç„ÉªÊîØÊâï„ÅÑÁÆ°ÁêÜ\n\n„É°„Éã„É•„Éº„Åã„Çâ„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑÔºÅ`
      });
    }
  }

  private async handleUnfollowEvent(event: any): Promise<void> {
    const userId = event.source.userId;
    logger.info('User unfollowed', { userId });
    // Handle cleanup if needed
  }

  private async sendMenuOptions(replyToken: string): Promise<void> {
    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: 'üìã „É°„Éã„É•„Éº‰∏ÄË¶ß\n\nüìÖ „Çπ„Ç±„Ç∏„É•„Éº„É´ - ÊéàÊ•≠‰∫àÂÆö„ÇíÁ¢∫Ë™ç\nüë• ÁîüÂæíÁÆ°ÁêÜ - ÁîüÂæíÊÉÖÂ†±„ÅÆÁÆ°ÁêÜ\nüìä „É¨„Éù„Éº„Éà - ÊàêÁ∏æ„ÉªÈÄ≤Êçó„É¨„Éù„Éº„Éà\nüé™ „Ç§„Éô„É≥„Éà - Â≠¶Ê†°„Ç§„Éô„É≥„ÉàÊÉÖÂ†±\nüí∞ Ë´ãÊ±Ç„ÉªÊîØÊâï„ÅÑ - ÊñôÈáëÁÆ°ÁêÜ\n‚öôÔ∏è Ë®≠ÂÆö - „Ç¢„Éó„É™„ÅÆË®≠ÂÆö\n\n„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ„ÄÇ'
    });
  }

  private async sendScheduleInfo(replyToken: string): Promise<void> {
    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: 'üìÖ „Çπ„Ç±„Ç∏„É•„Éº„É´Ê©üËÉΩ\n\n‰ªäÊó•„ÅÆÊéàÊ•≠„ÄÅ‰ªäÈÄ±„ÅÆ‰∫àÂÆö„ÄÅÊúàÈñì„Ç´„É¨„É≥„ÉÄ„Éº„Çí„ÅîÁ¢∫Ë™ç„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÄÇ\n\nWeb„Ç¢„Éó„É™„Åß„Çà„ÇäË©≥Á¥∞„Å™ÊÉÖÂ†±„Çí„ÅîË¶ß„Åè„Å†„Åï„ÅÑ„ÄÇ'
    });
  }

  private async sendStudentManagementMenu(replyToken: string): Promise<void> {
    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: 'üë• ÁîüÂæíÁÆ°ÁêÜÊ©üËÉΩ\n\n‚Ä¢ ÁîüÂæí„É™„Çπ„Éà\n‚Ä¢ Âá∫Â∏≠Áä∂Ê≥Å\n‚Ä¢ ÊàêÁ∏æÁÆ°ÁêÜ\n‚Ä¢ ‰øùË≠∑ËÄÖÈÄ£Áµ°ÂÖà\n\nWeb„Ç¢„Éó„É™„Åß„Çà„ÇäË©≥Á¥∞„Å™ÁÆ°ÁêÜ„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ'
    });
  }

  private async sendReportsMenu(replyToken: string): Promise<void> {
    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: 'üìä „É¨„Éù„Éº„ÉàÊ©üËÉΩ\n\n‚Ä¢ ÊúàÊ¨°„É¨„Éù„Éº„Éà\n‚Ä¢ ÁîüÂæíÂà•ÊàêÁ∏æ\n‚Ä¢ Âá∫Â∏≠ÁéáÁµ±Ë®à\n‚Ä¢ Â£≤‰∏äÂàÜÊûê\n\nË©≥Á¥∞„Å™„É¨„Éù„Éº„Éà„ÅØWeb„Ç¢„Éó„É™„Åß„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ'
    });
  }

  private async sendEventsMenu(replyToken: string): Promise<void> {
    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: 'üé™ „Ç§„Éô„É≥„ÉàÊ©üËÉΩ\n\n‚Ä¢ ‰ªäÂæå„ÅÆ„Ç§„Éô„É≥„Éà\n‚Ä¢ ÂèÇÂä†ËÄÖÁÆ°ÁêÜ\n‚Ä¢ „Ç§„Éô„É≥„Éà‰ΩúÊàê\n‚Ä¢ ÈÄöÁü•Ë®≠ÂÆö\n\nWeb„Ç¢„Éó„É™„Åß„Ç§„Éô„É≥„Éà„ÅÆË©≥Á¥∞ÁÆ°ÁêÜ„Åå„Åß„Åç„Åæ„Åô„ÄÇ'
    });
  }

  private async sendBillingMenu(replyToken: string): Promise<void> {
    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: 'üí∞ Ë´ãÊ±Ç„ÉªÊîØÊâï„ÅÑÊ©üËÉΩ\n\n‚Ä¢ ÊúàË¨ùÁÆ°ÁêÜ\n‚Ä¢ Ë´ãÊ±ÇÊõ∏Áô∫Ë°å\n‚Ä¢ ÊîØÊâï„ÅÑÁä∂Ê≥ÅÁ¢∫Ë™ç\n‚Ä¢ PayPay„Éª„Ç≥„É≥„Éì„ÉãÊ±∫Ê∏à\n\nWeb„Ç¢„Éó„É™„ÅßË©≥Á¥∞„Å™ÁÆ°ÁêÜ„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ'
    });
  }

  private async sendSettingsMenu(replyToken: string): Promise<void> {
    await this.client.replyMessage(replyToken, {
      type: 'text',
      text: '‚öôÔ∏è Ë®≠ÂÆöÊ©üËÉΩ\n\n‚Ä¢ ÈÄöÁü•Ë®≠ÂÆö\n‚Ä¢ „Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ\n‚Ä¢ Ë®ÄË™ûË®≠ÂÆö\n‚Ä¢ „Éó„É©„Ç§„Éê„Ç∑„ÉºË®≠ÂÆö\n\nWeb„Ç¢„Éó„É™„ÅßË©≥Á¥∞„Å™Ë®≠ÂÆöÂ§âÊõ¥„Åå„Åß„Åç„Åæ„Åô„ÄÇ'
    });
  }

  // Create lesson photo message for parents
  async createLessonPhotoMessage(data: {
    studentName: string;
    photoUrl: string;
    message: string;
    vocabulary: Array<{ english: string; japanese: string; romaji: string }>;
    lessonNotes: string;
    date: string;
  }): Promise<FlexMessage> {
    const season = this.getCurrentSeason();
    const theme = SEASONAL_THEMES[season];

    return {
      type: 'flex',
      altText: `${data.studentName}„Åï„Çì„ÅÆ„É¨„ÉÉ„Çπ„É≥ÂÜôÁúü`,
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: `${theme.emoji} „É¨„ÉÉ„Çπ„É≥ÂÜôÁúü`,
              weight: 'bold',
              color: '#FFFFFF',
              size: 'lg'
            },
            {
              type: 'text',
              text: data.date,
              color: '#FFFFFF',
              size: 'sm',
              margin: 'xs'
            }
          ],
          backgroundColor: theme.color,
          paddingAll: '12px'
        },
        hero: {
          type: 'image',
          url: data.photoUrl,
          size: 'full',
          aspectRatio: '20:13',
          aspectMode: 'cover'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: data.studentName + '„Åï„Çì',
              weight: 'bold',
              size: 'xl',
              margin: 'none'
            },
            {
              type: 'text',
              text: data.message,
              size: 'md',
              margin: 'md',
              wrap: true
            },
            ...(data.vocabulary.length > 0 ? [
              {
                type: 'separator',
                margin: 'lg'
              },
              {
                type: 'text',
                text: 'üìö ‰ªäÊó•„ÅÆÊñ∞„Åó„ÅÑÂçòË™û',
                weight: 'bold',
                size: 'md',
                margin: 'lg',
                color: '#666666'
              },
              ...data.vocabulary.slice(0, 3).map((word: any) => ({
                type: 'box',
                layout: 'horizontal',
                contents: [
                  {
                    type: 'text',
                    text: word.english,
                    flex: 2,
                    weight: 'bold',
                    color: '#2563EB'
                  },
                  {
                    type: 'text',
                    text: `${word.japanese} (${word.romaji})`,
                    flex: 3,
                    size: 'sm',
                    color: '#666666'
                  }
                ],
                margin: 'sm'
              }))
            ] : []),
            ...(data.lessonNotes ? [
              {
                type: 'separator',
                margin: 'lg'
              },
              {
                type: 'text',
                text: 'üìù „É¨„ÉÉ„Çπ„É≥„É°„É¢',
                weight: 'bold',
                size: 'md',
                margin: 'lg',
                color: '#666666'
              },
              {
                type: 'text',
                text: data.lessonNotes,
                size: 'sm',
                margin: 'sm',
                wrap: true,
                color: '#666666'
              }
            ] : [])
          ]
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '„ÅÑ„Å§„ÇÇ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ',
              size: 'sm',
              color: '#999999',
              align: 'center'
            }
          ],
          margin: 'sm'
        }
      }
    };
  }

  // Send lesson photo message to parent
  async sendLessonPhotoToParent(parentLineId: string, data: {
    studentName: string;
    photoUrl: string;
    message: string;
    vocabulary: Array<{ english: string; japanese: string; romaji: string }>;
    lessonNotes: string;
    date: string;
  }): Promise<void> {
    try {
      const flexMessage = await this.createLessonPhotoMessage(data);
      await this.client.pushMessage(parentLineId, flexMessage);
      
      logger.info('Lesson photo sent to parent successfully', { 
        parentLineId, 
        studentName: data.studentName 
      });
    } catch (error) {
      logger.error({ 
        error, 
        parentLineId, 
        studentName: data.studentName 
      }, 'Failed to send lesson photo to parent');
      throw error;
    }
  }
}

export const lineService = new LineService();